{"version":3,"sources":["js/appAdmin.js","js/controllers/admin.js","js/controllers/auth.js","js/models/blog.js","js/controllers/blogs.js","js/directives/dragDrop.js","js/models/image.js","js/controllers/images.js","js/controllers/main.js","js/models/user.js","js/models/work.js","js/controllers/works.js"],"names":["Router","$stateProvider","$urlRouterProvider","state","url","views","admin","templateUrl","controller","controllerAs","otherwise","Auth","$authProvider","tokenPrefix","loginUrl","signupUrl","AdminHomeController","adminHome","this","title","LoginController","$auth","$state","submit","login","isLoggedIn","credentials","then","currentUser","getPayload","go","authenticate","service","Blog","$resource","id","update","method","BlogsIndexController","blogsIndex","query","data","blogs","BlogCreateController","addArticle","console","log","blogCreate","blog","save","_id","authUser","author","BlogShowController","blogShow","get","params","dragdrop","reader","FileReader","restrict","replace","scope","base64","link","$scope","element","error","active","$watchGroup","image","src","onload","result","$apply","on","e","preventDefault","files","target","dataTransfer","size","readAsDataURL","Image","ImageUploaderController","addImage","Upload","MainController","$rootScope","secureState","toState","main","message","isAuthenticated","protectedStates","includes","name","$on","User","Work","WorksIndexController","worksIndex","works","WorkCreateController","workCreate","work","WorkShowController","workShow","angular","module","config","$inject","factory","directive"],"mappings":"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","file":"appAdmin.js","sourcesContent":["angular.module('admin', ['ngResource', 'ui.router', 'satellizer'])\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider'];\nfunction Router($stateProvider, $urlRouterProvider) {\n  $stateProvider\n    .state('home', {\n      url: '/',\n      views: {\n        'admin': {\n          templateUrl: '/admin/templates/login.html',\n          controller: 'LoginController',\n          controllerAs: 'login'\n        }\n      }\n    })\n    .state('adminHome', {\n      url: '/home',\n      views: {\n        'admin': {\n          templateUrl: '/admin/templates/adminHome.html',\n          controller: 'AdminHomeController',\n          controllerAs: 'adminHome'\n        }\n      }\n    })\n    .state('imageUpload', {\n      url: '/imageUploader',\n      views: {\n        'admin': {\n          templateUrl: '/admin/templates/imageUploader.html',\n          controller: 'ImageUploaderController',\n          controllerAs: 'imageUploader'\n        }\n      }\n    })\n\n    // Blogs\n    .state('blogsIndex', {\n      url: '/blogs',\n      views: {\n        'admin': {\n          templateUrl: '/admin/templates/blogsIndex.html',\n          controller: 'BlogsIndexController',\n          controllerAs: 'blogsIndex'\n        }\n      }\n    })\n    .state('blogCreate', {\n      url: '/blogs/new',\n      views: {\n        'admin': {\n          templateUrl: '/admin/templates/blogCreate.html',\n          controller: 'BlogCreateController',\n          controllerAs: 'blogCreate'\n        }\n      }\n    })\n    .state('blogShow', {\n      url: '/blogs/:id',\n      views: {\n        'admin': {\n          templateUrl: '/admin/templates/blogShow.html',\n          controller: 'BlogShowController',\n          controllerAs: 'blogShow'\n        }\n      }\n    })\n\n    // Works\n    .state('worksIndex', {\n      url: '/works',\n      views: {\n        'admin': {\n          templateUrl: '/admin/templates/worksIndex.html',\n          controller: 'WorksIndexController',\n          controllerAs: 'worksIndex'\n        }\n      }\n    })\n    .state('workCreate', {\n      url: '/works/new',\n      views: {\n        'admin': {\n          templateUrl: '/admin/templates/workCreate.html',\n          controller: 'WorkCreateController',\n          controllerAs: 'workCreate'\n        }\n      }\n    })\n    .state('workShow', {\n      url: '/works/:id',\n      views: {\n        'admin': {\n          templateUrl: '/admin/templates/workShow.html',\n          controller: 'WorkShowController',\n          controllerAs: 'workShow'\n        }\n      }\n    });\n  $urlRouterProvider.otherwise('/');\n}\n\nAuth.$inject = ['$authProvider'];\nfunction Auth($authProvider) {\n  $authProvider.tokenPrefix = '';\n  $authProvider.loginUrl = '/login';\n  $authProvider.signupUrl = '/register';\n}\n","angular.module('admin')\n  .controller('AdminHomeController', AdminHomeController);\n\nfunction AdminHomeController() {\n  const adminHome = this;\n  adminHome.title = 'This is the admin panel';\n\n}\n","angular.module('admin')\n.controller('LoginController', LoginController);\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    login.isLoggedIn = true;\n    $auth.loginUrl = '/api/auth/login';\n\n    $auth.login(login.credentials)\n      .then(() => {\n        login.currentUser = $auth.getPayload();\n        $state.go('adminHome');\n      });\n  }\n\n  function authenticate(service) {\n    $auth.authenticate(service)\n    .then(() => {\n      $state.go('adminHome');\n    });\n  }\n\n  login.submit = submit;\n  login.authenticate = authenticate;\n}\n","angular.module('admin')\n  .factory('Blog', Blog);\n\nBlog.$inject = ['$resource'];\nfunction Blog($resource) {\n  return new $resource('/api/blogs/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('admin')\n  .controller('BlogsIndexController', BlogsIndexController)\n  .controller('BlogCreateController', BlogCreateController)\n  .controller('BlogShowController', BlogShowController);\n\nBlogsIndexController.$inject = ['$resource', 'Blog'];\nfunction BlogsIndexController($resource, Blog) {\n  const blogsIndex = this;\n\n  Blog.query(data => {\n    blogsIndex.blogs = data;\n  });\n}\n\nBlogCreateController.$inject = ['$resource', '$state', '$auth', 'Blog'];\nfunction BlogCreateController($resource, $state, $auth, Blog) {\n  const blogCreate = this;\n\n  blogCreate.authUser = $auth.getPayload();\n  if(blogCreate.authUser) {\n    blogCreate.authUser = blogCreate.authUser._id;\n  }\n\n  blogCreate.blog = {\n    author: blogCreate.authUser\n  };\n\n  function addArticle() {\n    console.log(blogCreate.blog);\n    Blog.save(blogCreate, (data) => {\n      $state.go('blogShow', {id: data._id});\n    });\n  }\n\n  blogCreate.addArticle = addArticle;\n}\n\nBlogShowController.$inject = ['$resource', 'Blog', '$state'];\nfunction BlogShowController($resource, Blog, $state) {\n  const blogShow = this;\n\n  Blog.get($state.params, data => {\n    blogShow.data = data;\n  });\n}\n","angular.module('admin')\n  .directive('dragdrop', dragdrop);\n\nfunction dragdrop() {\n  const reader = new FileReader();\n  return {\n    restrict: 'E',\n    replace: true,\n    templateUrl: 'templates/dragDrop.html',\n    scope: {\n      base64: '='\n    },\n    link($scope, element) {\n\n      $scope.base64 = null;\n      $scope.error = null;\n      $scope.active = false;\n\n      $scope.$watchGroup(['base64', 'src'], () => {\n        $scope.image = $scope.base64 || $scope.src;\n      });\n\n      reader.onload = () => {\n        $scope.base64 = reader.result;\n        $scope.$apply();\n      };\n\n      element\n        .on('dragover', () => {\n          $scope.error = null;\n          $scope.active = true;\n          $scope.$apply();\n        })\n        .on('dragover', (e) => {\n          e.preventDefault();\n        })\n        .on('dragleave', () => {\n          $scope.active = false;\n          $scope.$apply();\n        })\n        .on('drop', (e) => {\n          e.preventDefault();\n          console.log('dropped');\n\n          const files = (e.target.files || e.dataTransfer.files)[0];\n\n          if(files.size > 40000) {\n            $scope.error = 'File is too large';\n            $scope.$apply();\n            return;\n          }\n\n          reader.readAsDataURL(files);\n        });\n    }\n  };\n}\n","angular.module('admin')\n  .factory('Image', Image);\n\nImage.$inject = ['$resource'];\nfunction Image($resource) {\n  return new $resource('/api/images/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('admin')\n  .controller('ImageUploaderController', ImageUploaderController);\n\nImageUploaderController.$inject = ['Image'];\nfunction ImageUploaderController(Image) {\n  const Upload = this;\n\n  Upload.image = {};\n\n  function addImage() {\n    console.log(Upload.data);\n    Image.save(Upload, () => {\n      Upload.image = {};\n    });\n  }\n\n  Upload.addImage = addImage;\n}\n","angular.module('admin')\n  .controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$rootScope', '$state'];\nfunction MainController($auth, $rootScope, $state) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.currentUser = $auth.getPayload();\n\n  const protectedStates = ['adminHome', 'imageUpload', 'blogsIndex', 'blogCreate', 'blogShow', 'worksIndex', 'workCreate', 'workShow'];\n\n  function secureState(e, toState) {\n    main.message = null;\n    if(!$auth.isAuthenticated() && protectedStates.includes(toState.name)) {\n      e.preventDefault();\n      $state.go('home');\n      main.message = 'You must be logged in to go there!';\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n}\n","angular.module('admin')\n  .factory('User', User);\n\nUser.$inject = ['$resource'];\nfunction User($resource) {\n  return new $resource('/api/users/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('admin')\n  .factory('Work', Work);\n\nWork.$inject = ['$resource'];\nfunction Work($resource) {\n  return new $resource('/api/works/:id', { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('admin')\n  .controller('WorksIndexController', WorksIndexController)\n  .controller('WorkCreateController', WorkCreateController)\n  .controller('WorkShowController', WorkShowController);\n\nWorksIndexController.$inject = ['$resource', 'Work'];\nfunction WorksIndexController($resource, Work) {\n  const worksIndex = this;\n\n  Work.query(data => {\n    worksIndex.works = data;\n  });\n}\n\nWorkCreateController.$inject = ['$resource', '$state', '$auth', 'Work'];\nfunction WorkCreateController($resource, $state, $auth, Work) {\n  const workCreate = this;\n\n  workCreate.authUser = $auth.getPayload();\n  if(workCreate.authUser) {\n    workCreate.authUser = workCreate.authUser._id;\n  }\n\n  workCreate.work = {\n    author: workCreate.authUser\n  };\n\n  function addArticle() {\n    console.log(workCreate.work);\n    Work.save(workCreate, (data) => {\n      $state.go('workShow', {id: data._id});\n    });\n  }\n\n  workCreate.addArticle = addArticle;\n}\n\nWorkShowController.$inject = ['$resource', 'Work', '$state'];\nfunction WorkShowController($resource, Work, $state) {\n  const workShow = this;\n\n  Work.get($state.params, data => {\n    workShow.data = data;\n  });\n}\n"]}